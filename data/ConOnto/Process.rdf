<?xml version="1.0"?><rdf:RDF xmlns:Fuzz="http://www.site.uottawa.ca/~mkhedr/Ontologies/Fuzzy#" xmlns:p3="http://protege.stanford.edu/plugins/owl/protege#" xmlns:Voc="http://www.site.uottawa.ca/~mkhedr/Ontologies/Vocabulary#" xmlns="http://www.site.uottawa.ca/~mkhedr/Ontologies/Process#" xmlns:rdfs="http://www.w3.org/2000/01/rdf-schema#" xmlns:Confoaf="http://www.site.uottawa.ca/~mkhedr/Ontologies/Confoaf#" xmlns:ConServ="http://www.site.uottawa.ca/~mkhedr/Ontologies/Service#" xmlns:ConTime="http://www.site.uottawa.ca/~mkhedr/Ontologies/Time#" xmlns:Contivity="http://www.site.uottawa.ca/~mkhedr/Ontologies/Activity#" xmlns:owl="http://www.w3.org/2002/07/owl#" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:Netcnfg="http://www.domain2.com#" xmlns:ConProf="http://www.site.uottawa.ca/~mkhedr/Ontologies/ServiceProfile#" xmlns:p2="http://www.site.uottawa.ca/~mkhedr/Ontologies/Location#" xmlns:p1="http://www.site.uottawa.ca/~mkhedr/Ontologies/Action#" xmlns:ConDev="http://www.site.uottawa.ca/~mkhedr/Ontologies/Device#" xmlns:xsd="http://www.w3.org/2001/XMLSchema#" xmlns:grounding="http://www.daml.org/services/owl-s/1.0/Grounding#" xmlns:HWcnfg="http://www.site.uottawa.ca/~mkhedr/Ontologies/HardwareProfile#" xmlns:p4="http://www.site.uottawa.ca/~mkhedr/Ontologies/SoftwareProfile#" xmlns:NetProf="http://www.site.uottawa.ca/~mkhedr/Ontologies/NetworkProfile#" xmlns:ConRule="http://www.site.uottawa.ca/~mkhedr/Ontologies/Rule#" xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xml:base="http://www.site.uottawa.ca/~mkhedr/Ontologies/Process"><owl:Ontology rdf:about=""><owl:versionInfo>
    $Id: Process.owl,v 1.52 2003/12/08 05:54:07 martin Exp $
  </owl:versionInfo><owl:imports rdf:resource="http://www.site.uottawa.ca/~mkhedr/Ontologies/Rule" /><owl:imports rdf:resource="http://www.site.uottawa.ca/~mkhedr/Ontologies/Service" /><owl:imports rdf:resource="http://www.site.uottawa.ca/~mkhedr/Ontologies/Time" /><rdfs:comment>
    Upper-level OWL ontology for Processes.
    Part of the DAML-S/OWL-S effort; see http://www.daml.org/services/.
  </rdfs:comment></owl:Ontology><owl:Class rdf:ID="Choice"><rdfs:subClassOf><owl:Class rdf:about="#ControlConstruct" /></rdfs:subClassOf><rdfs:subClassOf><owl:Restriction><owl:onProperty><owl:ObjectProperty rdf:about="#components" /></owl:onProperty><owl:allValuesFrom><owl:Class rdf:about="#ProcessComponentBag" /></owl:allValuesFrom></owl:Restriction></rdfs:subClassOf></owl:Class><owl:Class rdf:ID="Repeat-While"><rdfs:subClassOf><owl:Class rdf:about="#ControlConstruct" /></rdfs:subClassOf><rdfs:comment> The repeat while construct</rdfs:comment></owl:Class><owl:Class rdf:ID="UnConditionalOutput"><owl:equivalentClass><owl:Class><owl:intersectionOf rdf:parseType="Collection"><owl:Class rdf:about="#ConditionalOutput" /><owl:Restriction><owl:onProperty><owl:ObjectProperty rdf:about="#coCondition" /></owl:onProperty><owl:cardinality>0</owl:cardinality></owl:Restriction></owl:intersectionOf></owl:Class></owl:equivalentClass><rdfs:comment>An UnConditionalOutput has no condition.  </rdfs:comment></owl:Class><owl:Class rdf:ID="List" /><owl:Class rdf:ID="Split-Join"><rdfs:subClassOf><owl:Class rdf:about="#ControlConstruct" /></rdfs:subClassOf><rdfs:subClassOf><owl:Restriction><owl:onProperty><owl:ObjectProperty rdf:about="#components" /></owl:onProperty><owl:allValuesFrom><owl:Class rdf:about="#ProcessComponentBag" /></owl:allValuesFrom></owl:Restriction></rdfs:subClassOf></owl:Class><owl:Class rdf:ID="Input"><rdfs:subClassOf><owl:Class rdf:about="#Parameter" /></rdfs:subClassOf><owl:disjointWith><owl:Class rdf:about="#ConditionalOutput" /></owl:disjointWith></owl:Class><owl:Class rdf:ID="Precondition" /><owl:Class rdf:ID="AlternativeProcessModel"><rdfs:subClassOf><owl:Class rdf:about="#ProcessModel" /></rdfs:subClassOf></owl:Class><owl:Class rdf:ID="AtomicProcess"><rdfs:subClassOf><owl:Class rdf:about="#Process" /></rdfs:subClassOf></owl:Class><owl:Class rdf:ID="MetaInfo" /><owl:Class rdf:ID="SubProcessSimilarity"><rdfs:subClassOf><owl:Class rdf:about="#ServiceProcessSimilarity" /></rdfs:subClassOf></owl:Class><owl:Class rdf:ID="Effect"><rdfs:comment>
    This is a "place-holder" for now, which awaits further work from
    the DAML/OWL community.  An instance of Effect is a logical
    formula that evaluates to true or false.  Eventually we expect
    this to be defined elsewhere, as part of a OWL extension allowing
    for logical expressions.
  </rdfs:comment></owl:Class><owl:Class rdf:ID="ProcessComponent"><rdfs:subClassOf><owl:Restriction><owl:maxCardinality>1</owl:maxCardinality><owl:onProperty><owl:ObjectProperty rdf:about="#timeoutAbsolute" /></owl:onProperty></owl:Restriction></rdfs:subClassOf><rdfs:subClassOf><owl:Restriction><owl:maxCardinality>2</owl:maxCardinality><owl:onProperty rdf:resource="http://www.site.uottawa.ca/~mkhedr/Ontologies/Time#hasTemporalRelation" /></owl:Restriction></rdfs:subClassOf><rdfs:comment>
    A ProcessComponent is either a Process or a ControlConstruct.    
  </rdfs:comment><rdfs:subClassOf><owl:Restriction><owl:maxCardinality>2</owl:maxCardinality><owl:onProperty rdf:resource="http://www.site.uottawa.ca/~mkhedr/Ontologies/Time#hasTimevalue" /></owl:Restriction></rdfs:subClassOf><rdfs:subClassOf><owl:Restriction><owl:maxCardinality>1</owl:maxCardinality><owl:onProperty><owl:ObjectProperty rdf:about="#timeout" /></owl:onProperty></owl:Restriction></rdfs:subClassOf><owl:equivalentClass><owl:Class><owl:unionOf rdf:parseType="Collection"><owl:Class rdf:about="#Process" /><owl:Class rdf:about="#ControlConstruct" /></owl:unionOf></owl:Class></owl:equivalentClass><rdfs:comment>
    A ProcessComponent can have at most one of each of the restricted properties.
  </rdfs:comment></owl:Class><owl:Class rdf:ID="ProcessComponentList"><rdfs:subClassOf rdf:resource="#List" /><rdfs:comment> A list of ProcessComponents </rdfs:comment><rdfs:subClassOf><owl:Restriction><owl:onProperty><owl:ObjectProperty rdf:about="#rest" /></owl:onProperty><owl:allValuesFrom rdf:resource="#ProcessComponentList" /></owl:Restriction></rdfs:subClassOf><rdfs:subClassOf><owl:Restriction><owl:onProperty><owl:ObjectProperty rdf:about="#first" /></owl:onProperty><owl:allValuesFrom rdf:resource="#ProcessComponent" /></owl:Restriction></rdfs:subClassOf></owl:Class><owl:Class rdf:ID="Repeat-Until"><rdfs:comment> The repeat until process</rdfs:comment><rdfs:subClassOf><owl:Class rdf:about="#ControlConstruct" /></rdfs:subClassOf></owl:Class><owl:Class rdf:ID="MetaImport"><rdfs:subClassOf rdf:resource="#MetaInfo" /></owl:Class><owl:Class rdf:ID="Iterate"><rdfs:subClassOf><owl:Restriction><owl:allValuesFrom><owl:Class rdf:about="#ProcessComponentBag" /></owl:allValuesFrom><owl:onProperty><owl:ObjectProperty rdf:about="#components" /></owl:onProperty></owl:Restriction></rdfs:subClassOf><rdfs:subClassOf><owl:Class rdf:about="#ControlConstruct" /></rdfs:subClassOf></owl:Class><owl:Class rdf:ID="ConditionalEffect" /><owl:Class rdf:ID="Unordered"><rdfs:subClassOf><owl:Class rdf:about="#ControlConstruct" /></rdfs:subClassOf><rdfs:subClassOf><owl:Restriction><owl:onProperty><owl:ObjectProperty rdf:about="#components" /></owl:onProperty><owl:allValuesFrom><owl:Class rdf:about="#ProcessComponentBag" /></owl:allValuesFrom></owl:Restriction></rdfs:subClassOf></owl:Class><owl:Class rdf:ID="Sequence"><rdfs:subClassOf><owl:Class rdf:about="#ControlConstruct" /></rdfs:subClassOf><rdfs:subClassOf><owl:Restriction><owl:onProperty><owl:ObjectProperty rdf:about="#components" /></owl:onProperty><owl:allValuesFrom rdf:resource="#ProcessComponentList" /></owl:Restriction></rdfs:subClassOf></owl:Class><owl:Class rdf:ID="BaseOntology"><rdfs:subClassOf rdf:resource="#MetaInfo" /></owl:Class><owl:Class rdf:ID="Process"><rdfs:comment>
    A Process can have at most one name, but names need not be unique.
  </rdfs:comment><rdfs:subClassOf><owl:Restriction><owl:onProperty><owl:DatatypeProperty rdf:about="#name" /></owl:onProperty><owl:maxCardinality>1</owl:maxCardinality></owl:Restriction></rdfs:subClassOf><owl:equivalentClass><owl:Class><owl:unionOf rdf:parseType="Collection"><owl:Class rdf:about="#AtomicProcess" /><owl:Class rdf:about="#SimpleProcess" /><owl:Class rdf:about="#CompositeProcess" /></owl:unionOf></owl:Class></owl:equivalentClass><rdfs:subClassOf rdf:resource="http://www.site.uottawa.ca/~mkhedr/Ontologies/Time#TemporalEntity" /><rdfs:comment> The most general class of processes </rdfs:comment></owl:Class><owl:Class rdf:ID="ServiceProcessSimilarity"><rdfs:subClassOf rdf:resource="http://www.site.uottawa.ca/~mkhedr/Ontologies/Service#ServiceSimilarity" /></owl:Class><owl:Class rdf:ID="ProcessModel"><rdfs:subClassOf><owl:Restriction><owl:maxCardinality>1</owl:maxCardinality><owl:onProperty><owl:ObjectProperty rdf:about="#hasProcess" /></owl:onProperty></owl:Restriction></rdfs:subClassOf><rdfs:comment>
    A ServiceModel describes how a Service works, and
    a ProcessModel is a type of ServiceModel (the only
    type being defined for OWL-S).
    See also the introductory comments to Service.daml.  
  </rdfs:comment><rdfs:subClassOf><owl:Restriction><owl:maxCardinality>1</owl:maxCardinality><owl:onProperty><owl:ObjectProperty rdf:about="#hasControlModel" /></owl:onProperty></owl:Restriction></rdfs:subClassOf><rdfs:comment>
    A ProcessModel can have at most one Process and one ProcessControlModel.
  </rdfs:comment><rdfs:subClassOf rdf:resource="http://www.site.uottawa.ca/~mkhedr/Ontologies/Service#ServiceModel" /></owl:Class><owl:Class rdf:ID="ControlConstruct"><rdfs:subClassOf rdf:resource="http://www.site.uottawa.ca/~mkhedr/Ontologies/Time#TemporalEntity" /></owl:Class><owl:Class rdf:ID="Parameter"><rdfs:subClassOf><owl:Restriction><owl:onProperty><owl:ObjectProperty rdf:about="#parameterType" /></owl:onProperty><owl:minCardinality>1</owl:minCardinality></owl:Restriction></rdfs:subClassOf></owl:Class><owl:Class rdf:ID="If-Then-Else"><rdfs:subClassOf><owl:Restriction><owl:allValuesFrom><owl:Class rdf:about="#ProcessComponentBag" /></owl:allValuesFrom><owl:onProperty><owl:ObjectProperty rdf:about="#components" /></owl:onProperty></owl:Restriction></rdfs:subClassOf><rdfs:subClassOf rdf:resource="#ControlConstruct" /></owl:Class><owl:Class rdf:ID="ValueOf" /><owl:Class rdf:ID="ConditionalOutput"><rdfs:subClassOf rdf:resource="#Parameter" /></owl:Class><owl:Class rdf:ID="UnConditionalEffect"><owl:equivalentClass><owl:Class><owl:intersectionOf rdf:parseType="Collection"><owl:Class rdf:about="#ConditionalEffect" /><owl:Restriction><owl:cardinality>0</owl:cardinality><owl:onProperty><owl:ObjectProperty rdf:about="#ceCondition" /></owl:onProperty></owl:Restriction></owl:intersectionOf></owl:Class></owl:equivalentClass><rdfs:comment>
    An UnConditionalEffect has no condition.
  </rdfs:comment></owl:Class><owl:Class rdf:ID="SimpleProcess"><rdfs:subClassOf rdf:resource="#Process" /><owl:disjointWith rdf:resource="#AtomicProcess" /></owl:Class><owl:Class rdf:ID="Condition"><rdfs:comment>
    This is a "place-holder" for now, which awaits further work from
    the DAML/OWL community.  An instance of Condition is a logical
    formula that evaluates to true or false.  Eventually we expect
    this to be defined elsewhere, as part of a OWL extension allowing
    for logical expressions.
  </rdfs:comment><rdfs:subClassOf rdf:resource="http://www.site.uottawa.ca/~mkhedr/Ontologies/Rule#Rule" /><rdfs:subClassOf rdf:resource="http://www.site.uottawa.ca/~mkhedr/Ontologies/Time#TemporalDescription" /><rdfs:subClassOf rdf:resource="http://www.site.uottawa.ca/~mkhedr/Ontologies/Fuzzy#FuzzyRule" /></owl:Class><owl:Class rdf:ID="ProcessControlModel"><rdfs:comment>
    A ProcessControlModel is used to monitor and control execution of 
    a Process. This is just a "stub" for now; will be developed further
    in future releases of OWL-S.
  </rdfs:comment></owl:Class><owl:Class rdf:ID="ProcessComponentBag"><rdfs:comment> A multiset of ProcessComponents </rdfs:comment><rdfs:subClassOf rdf:resource="#List" /><rdfs:subClassOf><owl:Restriction><owl:allValuesFrom rdf:resource="#ProcessComponent" /><owl:onProperty><owl:ObjectProperty rdf:about="#first" /></owl:onProperty></owl:Restriction></rdfs:subClassOf><rdfs:subClassOf><owl:Restriction><owl:allValuesFrom rdf:resource="#ProcessComponentBag" /><owl:onProperty><owl:ObjectProperty rdf:about="#rest" /></owl:onProperty></owl:Restriction></rdfs:subClassOf></owl:Class><owl:Class rdf:ID="Split"><rdfs:subClassOf><owl:Restriction><owl:onProperty><owl:ObjectProperty rdf:about="#components" /></owl:onProperty><owl:allValuesFrom rdf:resource="#ProcessComponentBag" /></owl:Restriction></rdfs:subClassOf><rdfs:subClassOf rdf:resource="#ControlConstruct" /></owl:Class><owl:Class rdf:ID="CompositeProcess"><rdfs:subClassOf><owl:Restriction><owl:maxCardinality>1</owl:maxCardinality><owl:onProperty><owl:ObjectProperty rdf:about="#computedPrecondition" /></owl:onProperty></owl:Restriction></rdfs:subClassOf><rdfs:subClassOf><owl:Restriction><owl:onProperty><owl:DatatypeProperty rdf:about="#invocable" /></owl:onProperty><owl:maxCardinality>1</owl:maxCardinality></owl:Restriction></rdfs:subClassOf><rdfs:comment>
    A CompositeProcess can have at most one invocable property. Similarly for
    computedInput, computedOutput, computedEffect, and
    computedPrecondition.
  </rdfs:comment><rdfs:comment>
    A CompositeProcess must have exactly 1 composedOf property.
  </rdfs:comment><rdfs:subClassOf><owl:Restriction><owl:onProperty><owl:ObjectProperty rdf:about="#computedInput" /></owl:onProperty><owl:maxCardinality>1</owl:maxCardinality></owl:Restriction></rdfs:subClassOf><rdfs:subClassOf><owl:Restriction><owl:onProperty><owl:ObjectProperty rdf:about="#computedOutput" /></owl:onProperty><owl:maxCardinality>1</owl:maxCardinality></owl:Restriction></rdfs:subClassOf><rdfs:subClassOf rdf:resource="#Process" /><rdfs:subClassOf><owl:Restriction><owl:onProperty><owl:ObjectProperty rdf:about="#computedEffect" /></owl:onProperty><owl:maxCardinality>1</owl:maxCardinality></owl:Restriction></rdfs:subClassOf><owl:disjointWith rdf:resource="#AtomicProcess" /><owl:equivalentClass><owl:Class><owl:intersectionOf rdf:parseType="Collection"><owl:Class rdf:about="#Process" /><owl:Restriction><owl:onProperty><owl:ObjectProperty rdf:about="#composedOf" /></owl:onProperty><owl:cardinality>1</owl:cardinality></owl:Restriction></owl:intersectionOf></owl:Class></owl:equivalentClass><owl:disjointWith rdf:resource="#SimpleProcess" /></owl:Class><owl:ObjectProperty rdf:ID="computedPrecondition"><rdfs:range rdf:resource="http://www.w3.org/2002/07/owl#Thing" /><rdfs:comment>
    A computed precondition is a single expression that characterizes the
    preconditions of a composite process, based on the preconditions
    of its sub processes.
  </rdfs:comment><rdfs:domain rdf:resource="#CompositeProcess" /></owl:ObjectProperty><owl:ObjectProperty rdf:ID="expandsTo"><rdfs:range rdf:resource="#CompositeProcess" /><rdfs:domain rdf:resource="#SimpleProcess" /><owl:inverseOf><owl:ObjectProperty rdf:about="#collapsesTo" /></owl:inverseOf></owl:ObjectProperty><owl:ObjectProperty rdf:ID="first"><rdfs:range rdf:resource="http://www.w3.org/2002/07/owl#Thing" /><rdfs:domain rdf:resource="#List" /></owl:ObjectProperty><owl:ObjectProperty rdf:ID="computedEffect"><rdfs:comment>
    A computed effect is a single expression that characterizes the
    effects of a composite process, based on the effects
    of its sub processes.
  </rdfs:comment><rdfs:range rdf:resource="http://www.w3.org/2002/07/owl#Thing" /><rdfs:domain rdf:resource="#CompositeProcess" /></owl:ObjectProperty><owl:ObjectProperty rdf:ID="whileProcess"><rdfs:domain rdf:resource="#Repeat-While" /><rdfs:range rdf:resource="#ProcessComponent" /></owl:ObjectProperty><owl:ObjectProperty rdf:ID="realizes"><rdfs:domain rdf:resource="#AtomicProcess" /><owl:inverseOf><owl:ObjectProperty rdf:about="#realizedBy" /></owl:inverseOf><rdfs:range rdf:resource="#SimpleProcess" /></owl:ObjectProperty><owl:ObjectProperty rdf:ID="hasParticipant"><rdfs:subPropertyOf><owl:ObjectProperty rdf:about="#hasParameter" /></rdfs:subPropertyOf></owl:ObjectProperty><owl:ObjectProperty rdf:ID="preCondition"><rdfs:range rdf:resource="#Condition" /><rdfs:domain rdf:resource="#Precondition" /></owl:ObjectProperty><owl:ObjectProperty rdf:ID="theParameter"><rdfs:range rdf:resource="#Parameter" /><rdfs:domain rdf:resource="#ValueOf" /></owl:ObjectProperty><owl:ObjectProperty rdf:ID="hasProcess"><rdfs:domain rdf:resource="#ProcessModel" /><rdfs:range rdf:resource="#Process" /><rdfs:comment>
    In the case of a composite process, indicates the top-level process class.
  </rdfs:comment></owl:ObjectProperty><owl:ObjectProperty rdf:ID="chosen"><rdfs:range rdf:resource="#ProcessComponent" /><rdfs:domain rdf:resource="#Choice" /></owl:ObjectProperty><owl:ObjectProperty rdf:ID="isSimilar"><rdfs:domain rdf:resource="#ProcessModel" /><rdfs:range rdf:resource="#ServiceProcessSimilarity" /></owl:ObjectProperty><owl:ObjectProperty rdf:ID="timeout"><rdfs:range rdf:resource="http://www.site.uottawa.ca/~mkhedr/Ontologies/Time#TemporalEntity" /><rdfs:domain rdf:resource="#ProcessComponent" /></owl:ObjectProperty><owl:ObjectProperty rdf:ID="untilProcess"><rdfs:range rdf:resource="#ProcessComponent" /><rdfs:domain rdf:resource="#Repeat-Until" /></owl:ObjectProperty><owl:ObjectProperty rdf:ID="hasParameter"><rdfs:range rdf:resource="#Parameter" /><rdfs:domain rdf:resource="#Process" /></owl:ObjectProperty><owl:ObjectProperty rdf:ID="computedOutput"><rdfs:domain rdf:resource="#CompositeProcess" /><rdfs:comment>
    A computed output is a single expression that characterizes the
    outputs required by a composite process, and the conditions under
    which they are required.  See comment for computedInput.
  </rdfs:comment><rdfs:range rdf:resource="http://www.w3.org/2002/07/owl#Thing" /></owl:ObjectProperty><owl:ObjectProperty rdf:ID="collapse"><owl:equivalentProperty><owl:ObjectProperty rdf:about="#collapsesTo" /></owl:equivalentProperty><rdfs:comment>This is a deprecated usage; collapsesTo is preferred.</rdfs:comment></owl:ObjectProperty><owl:ObjectProperty rdf:ID="whileCondition"><rdfs:domain rdf:resource="#Repeat-While" /><rdfs:range rdf:resource="#Condition" /></owl:ObjectProperty><owl:ObjectProperty rdf:ID="ceCondition"><rdfs:comment> The condition of a conditional effect. </rdfs:comment><rdfs:range rdf:resource="#Condition" /><rdfs:domain rdf:resource="#ConditionalEffect" /></owl:ObjectProperty><owl:ObjectProperty rdf:ID="sameValues"><rdfs:range rdf:resource="#List" /><rdfs:comment>The range is to be a list of ValueOf.</rdfs:comment><rdfs:domain rdf:resource="#ProcessComponent" /></owl:ObjectProperty><owl:ObjectProperty rdf:ID="realizedBy"><owl:inverseOf rdf:resource="#realizes" /><rdfs:domain rdf:resource="#SimpleProcess" /><rdfs:range rdf:resource="#AtomicProcess" /></owl:ObjectProperty><owl:ObjectProperty rdf:ID="hasPrecondition"><rdfs:domain rdf:resource="#Process" /><rdfs:range rdf:resource="#Precondition" /></owl:ObjectProperty><owl:ObjectProperty rdf:ID="chooseFrom"><rdfs:range rdf:resource="#ProcessComponentBag" /><rdfs:domain rdf:resource="#Choice" /></owl:ObjectProperty><owl:ObjectProperty rdf:ID="coCondition"><rdfs:comment> The condition of a conditional output </rdfs:comment><rdfs:domain rdf:resource="#ConditionalOutput" /><rdfs:range rdf:resource="#Condition" /></owl:ObjectProperty><owl:ObjectProperty rdf:ID="then"><rdfs:domain rdf:resource="#If-Then-Else" /><rdfs:range rdf:resource="#ProcessComponent" /></owl:ObjectProperty><owl:ObjectProperty rdf:ID="untilCondition"><rdfs:domain rdf:resource="#Repeat-Until" /><rdfs:range rdf:resource="#Condition" /></owl:ObjectProperty><owl:ObjectProperty rdf:ID="hasEffect"><rdfs:domain rdf:resource="#Process" /><rdfs:range rdf:resource="#ConditionalEffect" /></owl:ObjectProperty><owl:ObjectProperty rdf:ID="expand"><owl:equivalentProperty rdf:resource="#expandsTo" /><rdfs:comment>This is a deprecated usage; expandsTo is preferred.</rdfs:comment></owl:ObjectProperty><owl:ObjectProperty rdf:ID="Else"><rdfs:domain rdf:resource="#If-Then-Else" /><rdfs:range rdf:resource="#ProcessComponent" /></owl:ObjectProperty><owl:ObjectProperty rdf:ID="hasControlModel"><rdfs:domain rdf:resource="#ProcessModel" /><rdfs:range rdf:resource="#ProcessControlModel" /></owl:ObjectProperty><owl:ObjectProperty rdf:ID="components"><rdfs:domain rdf:resource="#ControlConstruct" /><rdfs:comment> 
  The components propery of a control construct holds
  a specific arrangement of subprocesses or control constructs. 
  The range is declared at each subclass of ControlConstruct.
 </rdfs:comment><rdfs:range rdf:resource="http://www.w3.org/2002/07/owl#Thing" /></owl:ObjectProperty><owl:ObjectProperty rdf:ID="rest"><rdfs:range rdf:resource="http://www.w3.org/2002/07/owl#Thing" /><rdfs:domain rdf:resource="#List" /></owl:ObjectProperty><owl:ObjectProperty rdf:ID="parameterType"><rdfs:domain rdf:resource="#Parameter" /><rdfs:range rdf:resource="http://www.w3.org/2002/07/owl#Thing" /><rdfs:comment>
      Range is left unspecified currently, to allow for both OWL classes and
      XSD datatypes.  (However, this is subject to revision in the next
      release.)
  </rdfs:comment></owl:ObjectProperty><owl:ObjectProperty rdf:ID="ceEffect"><rdfs:comment> The effect of a conditional effect. </rdfs:comment><rdfs:domain rdf:resource="#ConditionalEffect" /><rdfs:range rdf:resource="#Effect" /></owl:ObjectProperty><owl:ObjectProperty rdf:ID="collapsesTo"><rdfs:range rdf:resource="#SimpleProcess" /><rdfs:domain rdf:resource="#CompositeProcess" /><owl:inverseOf rdf:resource="#expandsTo" /></owl:ObjectProperty><owl:ObjectProperty rdf:ID="hasInput"><rdfs:subPropertyOf rdf:resource="#hasParameter" /><rdfs:range rdf:resource="#Input" /></owl:ObjectProperty><owl:ObjectProperty rdf:ID="ifCondition"><rdfs:domain rdf:resource="#If-Then-Else" /><rdfs:comment> The if condition of an if-then-else</rdfs:comment><rdfs:range rdf:resource="#Condition" /></owl:ObjectProperty><owl:ObjectProperty rdf:ID="computedInput"><rdfs:domain rdf:resource="#CompositeProcess" /><rdfs:comment>
    A computed input is a single expression that characterizes the
    inputs required by a composite process, and the conditions under
    which they are required.  This expression may, if needed, tie
    together 2 or more inputs; for example, "either a credit card number,
    or a bank account number must be given", or "if product
    id starts with 'M', no shipping method need be given".
    Additionally, this expression may refer to things other than inputs;
    for example; "if user's credit rating is 'excellent' or better,
    Social Security number is not required", or "if product weight
    is less than 1 lb., no shipping myth did need be given".

    A "computed" input is so named because it is meant to be computed
    automatically by some tool, by inspecting the makeup of the composite 
    process.

    The language used to represent a computed input is not specified
    here, and will be the subject of future work; hence, the use of Thing
    as range.  It will require expressiveness greater than that of
    OWL.
  </rdfs:comment><rdfs:range rdf:resource="http://www.w3.org/2002/07/owl#Thing" /></owl:ObjectProperty><owl:ObjectProperty rdf:ID="atProcess"><rdfs:domain rdf:resource="#ValueOf" /><rdfs:range rdf:resource="#Process" /></owl:ObjectProperty><owl:ObjectProperty rdf:ID="hasAlternativeProcess"><rdfs:domain rdf:resource="#ProcessModel" /><rdfs:range rdf:resource="#ProcessModel" /></owl:ObjectProperty><owl:ObjectProperty rdf:ID="hasOutput"><rdfs:subPropertyOf rdf:resource="#hasParameter" /><rdfs:range rdf:resource="#ConditionalOutput" /></owl:ObjectProperty><owl:ObjectProperty rdf:ID="composedOf"><rdfs:domain rdf:resource="#CompositeProcess" /><rdfs:range rdf:resource="#ControlConstruct" /></owl:ObjectProperty><owl:ObjectProperty rdf:ID="timeoutAbsolute"><rdfs:range rdf:resource="http://www.site.uottawa.ca/~mkhedr/Ontologies/Time#TemporalEntity" /><rdfs:domain rdf:resource="#ProcessComponent" /></owl:ObjectProperty><owl:DatatypeProperty rdf:ID="prefix"><rdfs:domain rdf:resource="#MetaImport" /><rdfs:range rdf:resource="http://www.w3.org/2001/XMLSchema#string" /></owl:DatatypeProperty><owl:DatatypeProperty rdf:ID="invocable"><rdfs:domain rdf:resource="#CompositeProcess" /><rdfs:comment>
    Invocable is a flag that tells whether the CompositeProcess bottoms 
    out in atomic processes.  (If so, it is "invocable".)
  </rdfs:comment><rdfs:range rdf:resource="http://www.w3.org/2001/XMLSchema#boolean" /></owl:DatatypeProperty><owl:DatatypeProperty rdf:ID="hasAlternativeEntry"><rdfs:domain rdf:resource="#MetaInfo" /><rdfs:range rdf:resource="http://www.w3.org/2001/XMLSchema#string" /></owl:DatatypeProperty><owl:DatatypeProperty rdf:ID="hasImportOntology"><rdfs:range rdf:resource="http://www.w3.org/2001/XMLSchema#string" /><rdfs:domain rdf:resource="#MetaImport" /></owl:DatatypeProperty><owl:DatatypeProperty rdf:ID="name"><rdfs:range rdf:resource="http://www.w3.org/2000/01/rdf-schema#Literal" /><rdfs:domain rdf:resource="#Process" /></owl:DatatypeProperty><owl:Restriction rdf:ID="Anonymous-2"><owl:equivalentClass><owl:Restriction><owl:onProperty rdf:resource="#first" /><owl:allValuesFrom rdf:resource="#ProcessComponent" /></owl:Restriction></owl:equivalentClass></owl:Restriction><owl:Restriction rdf:ID="Anonymous-1"><owl:equivalentClass><owl:Restriction><owl:onProperty rdf:resource="#first" /><owl:allValuesFrom rdf:resource="#ProcessComponent" /></owl:Restriction></owl:equivalentClass></owl:Restriction></rdf:RDF><!-- Created with Protege (with OWL Plugin 1.0, Build 72)  http://protege.stanford.edu -->